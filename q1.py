# Change the code as it was generated by ChatGPT
import numpy as np

def generate_spike_train(rate, duration, refractory_period=0):
    """
    Generate spikes using a Poisson process.

    Parameters:
    rate (float): Firing rate in Hz.
    duration (float): Duration of spike train in seconds.
    refractory_period (float): Refractory period in seconds. Default is 0 (no refractory period).

    Returns:
    np.array: Times of spikes.
    """
    # dt = 1e-3  # Time step in seconds (1 ms)
    # num_steps = int(duration / dt)
    # spikes = np.random.rand(num_steps) < rate * dt

    # if refractory_period > 0:
    #     refractory_steps = int(refractory_period / dt)
    #     for i in range(refractory_steps, num_steps):
    #         if spikes[i]:
    #             spikes[i - refractory_steps:i] = False

    # spike_times = dt * np.where(spikes)[0]
    # return spike_times

    current_time = 0
    spike_times = []

    while current_time < duration:
        # Draw the next spike time from an exponential distribution
        next_spike = np.random.exponential(1 / rate)
        
        # Check for the refractory period
        if refractory_period > 0 and len(spike_times) > 0:
            if next_spike < refractory_period:
                next_spike = refractory_period

        current_time += next_spike
        if current_time < duration:
            spike_times.append(current_time)

    return np.array(spike_times)

def calculate_fano_factor(spike_times, window_sizes, duration):
    """
    Calculate the Fano factor of the spike count over different window sizes.

    Parameters:
    spike_times (np.array): Times of spikes.
    window_sizes (list): List of window sizes in seconds.
    duration (float): Duration of spike train in seconds.

    Returns:
    dict: Fano factors for each window size.
    """
    fano_factors = {}
    for window in window_sizes:
        window_steps = int(window / 1e-3)  # Convert window size to steps
        num_windows = int(duration / window)
        spike_counts = [np.sum((spike_times >= i * window) & (spike_times < (i + 1) * window)) for i in range(num_windows)]
        variance = np.var(spike_counts)
        mean = np.mean(spike_counts)
        fano_factors[window] = variance / mean if mean > 0 else float('nan')
    
    return fano_factors

def calculate_coefficient_of_variation(spike_times):
    """
    Calculate the coefficient of variation of the inter-spike intervals.

    Parameters:
    spike_times (np.array): Times of spikes.

    Returns:
    float: Coefficient of variation.
    """
    if len(spike_times) < 2:
        return float('nan')
    
    isi = np.diff(spike_times)
    return np.std(isi) / np.mean(isi)

def question1():
    # Parameters
    firing_rate = 35  # Hz
    duration = 1000  # seconds
    window_sizes = [0.01, 0.05, 0.1]  # 10 ms, 50 ms, 100 ms

    # Generate spike trains
    spike_train_no_refractory = generate_spike_train(firing_rate, duration)
    spike_train_with_refractory = generate_spike_train(firing_rate, duration, 0.005)  # 5 ms refractory period

    # Calculate Fano factors and coefficients of variation
    fano_no_refractory = calculate_fano_factor(spike_train_no_refractory, window_sizes, duration)
    fano_with_refractory = calculate_fano_factor(spike_train_with_refractory, window_sizes, duration)
    cv_no_refractory = calculate_coefficient_of_variation(spike_train_no_refractory)
    cv_with_refractory = calculate_coefficient_of_variation(spike_train_with_refractory)

    # Display the results
    print("No Refractory Period:")
    print("Fano Factors:", fano_no_refractory)
    print("Coefficient of Variation (CV) of ISI:", cv_no_refractory)

    print("\nWith 5 ms Refractory Period:")
    print("Fano Factors:", fano_with_refractory)
    print("Coefficient of Variation (CV) of ISI:", cv_with_refractory)
